# Copyright (c) 2019 Anton Semjonov
# Licensed under the MIT License

# general input / output and data options
set xdata time
set timefmt "%Y-%m-%dT%H:%M:%S.*Z"
set datafile separator ","
set terminal svg size 1280, 800 dynamic
set output ARG2
set multiplot

# manual margins for multiplot
set bmargin screen 0.11
set tmargin screen 0.92
set lmargin screen 0.12
set rmargin screen 0.91

# pick colors
rgb_download      = "#00000080"
rgb_download_fade = "#702185ff"
rgb_download_text = "#00000080"
rgb_upload        = "#00ff3371"
rgb_upload_fade   = "#70ff3371"
rgb_upload_text   = "#00ff3371"
rgb_ping          = "#0070e000"

# check if bandwidth markers are given and scale to mbits
# config with: gnuplot -e 'marker_download = <mbit>' ...
if (exists("marker_download") && marker_download > 0) \
  marker_download = marker_download * 1000000; \
  dlmarker = 1; else dlmarker = 0;
if (exists("marker_upload") && marker_upload > 0) \
  marker_upload = marker_upload * 1000000; \
  ulmarker = 1; else ulmarker = 0;

# scaling of upload plot relative to download range
# config with: gnuplot -e 'upload_scale = <factor>' ...
if (exists("upload_scale") && upload_scale > 0 && upload_scale != 1) \
  ulscale = upload_scale; else ulscale = 1.0;

# calculate averages per dimension
set fit quiet logfile "/dev/null"
avgping(x) = ping
fit avgping(x) ARG1 using 4:6 via ping
avgdown(x) = down
fit avgdown(x) ARG1 using 4:7 via down
avgup(x) = up
fit avgup(x) ARG1 using 4:8 via up

# ---------- plot 1/3: ping and labels ----------

# enable all titles and labels that need to be plotted once
set title "Speedtest Results\ngithub.com/ansemjo/speedtest-plotter"
set timestamp "plotted %F %T %Z"
set xlabel "Measurement Date"
set ylabel "Bandwidth" offset -12, 0
set xtics format "%Y-%m-%d\n%H:%M:%S" out

# plot ping data
unset ytics
set yrange [0:*]
set y2label "Ping"
set y2tics format "%.0f ms" nomirror out
set y2range [0:*]
set key at graph 1, graph 0.92
set linetype 1 lw 1 lc rgb rgb_ping pt 1
plot \
  ARG1 using 4:6 title gprintf("Ping (avg. %.0f ms)", avgping(x)) axes x1y2 with points lt 1

# unset elements that would be duplicate
unset title
unset timestamp
unset xlabel
unset ylabel
unset y2label
unset y2tics
set xtics format "" out
set ytics format "%.2s %cBit/s" nomirror out
set grid

# ---------- plot 2/3: download ----------

# if download marker is given, use it for yrange
if (dlmarker) \
  set arrow from graph 0,first marker_download to graph 1,first marker_download \
  nohead lw 2 dt "-" lc rgb rgb_download_text back; \
  set yrange [0:marker_download*1.5]; \
else set yrange [0:*]

# maybe split tick labels
if (ulscale != 1.0) set ytics offset 0, 0.5 tc rgb rgb_download_text;

set key at graph 1, graph 0.98
set linetype 1 lw 1 lc rgb rgb_download_fade
set linetype 2 lw 3 lc rgb rgb_download
plot \
  ARG1 using 4:7 notitle with steps, \
  ARG1 using 4:7 title gprintf("Download (avg. %.2s %cBit/s)", avgdown(x)) sm bezier

# ---------- plot 3/3: upload ----------

# if upload marker is given, use it for yrange
if (ulmarker) \
  set arrow from graph 0,first marker_upload to graph 1,first marker_upload \
  nohead lw 2 dt "-" lc rgb rgb_upload_text back;
set yrange [0:GPVAL_Y_MAX/ulscale]

# either split tick labels or simply unset
if (ulscale != 1.0) \
  set ytics offset 0, -0.5 textcolor rgb rgb_upload_text; \
  else unset ytics;

set key at graph 1, graph 0.95
set linetype 1 lw 1 lc rgb rgb_upload_fade
set linetype 2 lw 3 lc rgb rgb_upload
plot \
  ARG1 using 4:8 notitle with steps, \
  ARG1 using 4:8 title gprintf("Upload (avg. %.2s %cBit/s)", avgup(x)) sm bezier
