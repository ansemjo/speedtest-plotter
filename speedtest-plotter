#!/usr/bin/env python3

# Copyright (c) 2019 Anton Semjonov
# Licensed under the MIT License

import subprocess, csv, json, tempfile, sys, argparse, os, io, signal, re, datetime, logging, time
import dataset
from dateutil import parser as dateparser, tz
from urllib.parse import urlparse

# default / environment variables
DATABASE = os.environ.get("DATABASE", "sqlite:///speedtest.db")
PORT = os.environ.get("PORT", "8000")
SERVER = os.environ.get("TESTSERVER", None)
MARKER_DOWNLOAD = os.environ.get("MARKER_DOWNLOAD", 0)
MARKER_UPLOAD = os.environ.get("MARKER_UPLOAD", 0)
UPLOAD_SCALE = os.environ.get("UPLOAD_SCALE", 1)
FETCH_LIMIT = os.environ.get("FETCH_LIMIT", "7d")
PLOT_FONT = os.environ.get("FONT", ",12")
PLOT_RESOLUTION = os.environ.get("RESOLUTION", "1280,800")

# commandline parser
p = argparse.ArgumentParser()
p.add_argument("-d", dest="database", help="database connection uri", default=DATABASE)
p.add_argument("-p", dest="port", help="port to run application server on", default=PORT)
p.add_argument("-s", dest="server", help="take measurements against specific server:port", default=SERVER)
p.add_argument("-l", dest="limit", help="limit number of results when dumping", default=32768)
p.add_argument("-o", dest="order", help="order retrieval, desc/before or asc/after the date", choices=("asc", "desc"), default="desc")
p.add_argument("-t", dest="date", help="dump up to or after this iso timestamp", default="now")
p.add_argument("--marker-download", help="add expected download marker in plot", default=MARKER_DOWNLOAD)
p.add_argument("--marker-upload", help="add expected upload marker in plot", default=MARKER_UPLOAD)
p.add_argument("--upload-scale", help="scale upload yrange relative to download", default=UPLOAD_SCALE)
p.add_argument("--fetch-limit", help="default time limit to fetch for display", default=FETCH_LIMIT)
p.add_argument("--font", help="use different font for plot (Name,size)", default=PLOT_FONT)
p.add_argument("--resolution", help="change svg output resolution (resx,resy)", default=PLOT_RESOLUTION)
p.add_argument("--debug", help="enable flask and sql debugging", action="store_true")
p.add_argument("command", choices=["serve", "measure", "dump", "import"], help="start webserver, take a measurement, dump results to csv or reimport csv data")
args = p.parse_args()

# print sql engine messages when debugging
if args.debug:
  sqllog = logging.StreamHandler()
  sqllog.setFormatter(logging.Formatter("SQL Engine> %(message)s"))
  engine = logging.getLogger('sqlalchemy.engine')
  engine.setLevel(logging.INFO)
  engine.addHandler(sqllog)

# if database argument has no dialect, assume sqlite
if re.match(r"^\w+://", args.database) is None:
  args.database = "sqlite:///" + args.database

# connect to database
db = dataset.connect(args.database, sqlite_wal_mode=False)
table = db["speedtest"]

# handle ctrl-c
def quit(signum, time):
  db.close()
  print(" quit.")
  sys.exit(0)
signal.signal(signal.SIGINT, quit)

# run a subcommand and capture its output
def run(cmd, stdin=None):
  return subprocess.run(cmd, capture_output=True, stdin=stdin)

# return current utc time
def utcnow():
  return datetime.datetime.now(datetime.timezone.utc).replace(microsecond=0)

# get local timezone from TZ env
localtz = tz.gettz()

# transform a timestamp (assume utc) to local timezone (given in TZ env)
def isoformat_to_local(then):
  try:
    t = datetime.datetime.fromisoformat(then)
  except ValueError:
    t = dateparser.parse(then)
  if t.tzinfo is None:
    t = t.replace(tzinfo=datetime.timezone.utc)
  return t.astimezone(localtz)

def pltrange(t):
  if t.tzinfo is None:
    t = t.replace(tzinfo=datetime.timezone.utc)
  return t.astimezone(localtz).replace(microsecond=0).isoformat()

# parse a possibly unqualified timestamp to utc for searching
def parse_to_utc(then):
  try:
    if then == "now":
      t = utcnow()
    else:
      t = dateparser.parse(then)
  except Exception as e:
    raise ValueError(f"cannot parse iso date: {e}")
  if t.tzinfo is None:
    t = t.replace(tzinfo=localtz)
  return t.astimezone(datetime.timezone.utc)

# column names in speedtest-cli csv output
FIELDNAMES = ("Server ID", "Sponsor", "Server Name", "Timestamp", "Distance",
  "Ping", "Download", "Upload", "Share", "IP Address")

# custom exception when SpeedTest had an error
class SpeedTestError(Exception): pass

# parse the json output of taganaka/SpeedTest
def parse_measurement(js, now=utcnow().isoformat()):
  if (err := js.get("error")) is not None:
    raise SpeedTestError(err)
  server, client = js.get("server", {}), js.get("client", {})
  return dict(zip(FIELDNAMES, (
    server.get("host", ""),
    server.get("sponsor", ""),
    server.get("name", ""),
    now,
    server.get("distance", ""),
    js["ping"],
    js["download"],
    js["upload"],
    js.get("share", ""),
    client.get("ip", ""),
  )))

# parse the json output of showwin/speedtest-go
def parse_measurement_go(js, now=utcnow().isoformat()):
  server = js.get("servers", [{}])[0]
  client = js.get("user_info", {})
  return dict(zip(FIELDNAMES, (
    server.get("id", ""),
    server.get("sponsor", ""),
    server.get("name", ""),
    now,
    server.get("distance", ""),
    server.get("latency", 0) / 1000000,
    server.get("dl_speed") * 8,
    server.get("ul_speed") * 8,
    "",
    client.get("IP", ""),
  )))

# take a new measurement with taganaka/SpeedTest
def take_measurement(attempt=0):
  cmd = ["SpeedTest", "--output", "json"]
  if args.server:
    cmd += ["--test-server", args.server]
  now = utcnow().isoformat()
  res = run(cmd)
  if res.returncode != 0:
    stderr = res.stderr.decode()
    if "download server list" in stderr and attempt < 3:
      # silently retry when server list endpoint was unavailable
      time.sleep(15)
      return take_measurement(attempt+1)
    else:
      raise SpeedTestError(stderr)
  r = parse_measurement(json.loads(res.stdout), now)
  table.insert(r)
  print(r)

# take a new measurement with taganaka/SpeedTest
def take_measurement_go(attempt=0):
  # I think the --unit doesn't do anything for JSON but be explicit what we expect
  cmd = ["speedtest-go", "--json", "--unit", "decimal-bytes"]
  if args.server:
    cmd += ["-s", args.server]
  now = utcnow().isoformat()
  res = run(cmd)
  if res.returncode != 0:
    stderr = res.stderr.decode()
    if "download server list" in stderr and attempt < 3:
      # silently retry when server list endpoint was unavailable
      time.sleep(15)
      return take_measurement_go(attempt+1)
    else:
      raise SpeedTestError(stderr)
  r = parse_measurement_go(json.loads(res.stdout), now)
  table.insert(r)
  print(r)

# parse csv results from speedtest-cli format to dict generator
def csv_reader(reader):
  cr = csv.DictReader(reader, fieldnames=FIELDNAMES)
  for line in cr:
    if list(line.values()) == list(FIELDNAMES):
      continue # skip header line
    yield line

# output stored database rows to writer as speedtest-cli csv with header
def csv_writer(rows, writer):
  wr = csv.DictWriter(writer, fieldnames=FIELDNAMES)
  wr.writeheader()
  for row in rows: #sorted(rows, key=lambda r: r["id"]):
    try: del row["id"]
    except: pass
    row["Timestamp"] = isoformat_to_local(row["Timestamp"]).isoformat()
    wr.writerow(row)
  return writer

# write retrieved measurements to a spooled temporary file
def spooler(rows):
  spool = tempfile.SpooledTemporaryFile(mode="wt+")
  csv_writer(rows, spool)
  spool.seek(0)
  return spool

# retrieve only the latest measurement
def latest():
  return table.find_one(order_by=["-Timestamp"])

# retrieve measurements from table applying optional filters
def retrieve_measurements(limit, order, date, **rest):
  delta = None
  ascend = True

  # check ordering argument
  if order == "asc":
    ascend = True
  elif order == "desc":
    ascend = False
  else:
    raise ValueError("order must be either \"asc\" or \"desc\"")

  # fill date if none given
  if date is None or date == "":
    date = parse_to_utc(latest()["Timestamp"]) or utcnow()
  else:
    date = parse_to_utc(date)

  # maybe interpret limit as a timeframe
  if match := re.match(r"^([0-9]+)([dh]?)$", str(limit)):
    num, mod = match.groups()
    if mod == "d":   delta = datetime.timedelta(days=int(num))
    elif mod == "h": delta = datetime.timedelta(hours=int(num))
    else: limit = int(num)
  else:
    raise ValueError("unknown limit format! must match: /^([0-9]+)([dh]?)$/")

  if delta:
    if ascend:
      pr = (pltrange(date), pltrange(date+delta))
      return pr, table.find(Timestamp={'>=': date.isoformat(), '<=': (date+delta).isoformat()}, order_by=["-Timestamp"])
    else:
      pr = (pltrange(date-delta), pltrange(date))
      return pr, table.find(Timestamp={'>=': (date-delta).isoformat(), '<=': date.isoformat()}, order_by=["-Timestamp"])
  else:
    if ascend:
      return None, table.find(Timestamp={'>=': date.isoformat()}, order_by=["Timestamp"], _limit=limit)
    else:
      return None, table.find(Timestamp={'<=': date.isoformat()}, order_by=["-Timestamp"], _limit=limit)


def flask_server():

  # initialize flask
  import flask
  print(" * Connected database: {}".format(args.database))
  app = flask.Flask("speedtest", root_path="./")
  app.env = "development"

  # retrieve common request parameters for retrieval and plotting
  def request_params(req):
    # get interesting parameters
    limit = req.args.get("limit", None) or args.fetch_limit
    order = req.args.get("order", None) or "desc"
    date = req.args.get("date", None) or "now"
    # save the entire query component to pass on
    query = urlparse(req.url).query
    return (query, dict(limit=limit, order=order, date=date))

  # scale number as mbit/s
  @app.template_filter("mbits")
  def to_mbits(d, fact=1_000_000, unit="MBit/s"):
    scaled = float(d) / fact
    return f"{scaled:.2f} {unit}"

  # apply isoformat_to_local to timestamps
  @app.template_filter("datefmt")
  def to_local_datefmt(t):
    return isoformat_to_local(t).replace(microsecond=0).strftime("%F %T %Z")

  # homepage with rendered results
  @app.route("/")
  def home():
    try:
      (query, params) = request_params(flask.request)
      # dummy check if all parameters are legal
      _, rows = retrieve_measurements(**params)
      rows = list(rows)
      last = rows[0] if len(rows) else None
      total = len(table)

      TEMPLATE = """
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>Speedtest Plot</title>
            <style>
              input, select {
                box-sizing: border-box;
                border: 1px solid #000;
                border-radius: 3px;
                padding: 0.5em;
              }
              html {
                font-family: monospace;
              }
              img {
                border: 1px solid gray;
                margin: 1em;
                max-width: calc(100% - 2em);
                max-height: 80vh;
              }
              body {
                background-color: white;
              }
              table td {
                text-align: right;
                padding: 3px 10px;
              }
            </style>
          </head>
          <body>
            <center>
              <form action="." method="get">
                Show
                <input type="text" name="limit" value="{{ limit }}" title="limit number of results (total: {{ total }})">
                <select name="order" title="'after' (descending) or 'up to' (ascending before)">
                  <option value="asc"  {% if order == "asc" %}selected="selected"{% endif %}>After</option>
                  <option value="desc" {% if order != "asc" %}selected="selected"{% endif %}>Before</option>
                </select>
                <input type="text" name="date" value="{{ date }}" title="a particular date in iso format">
                <input type="submit" value="Apply">
              </form>
              <a href="results.csv?{{ query }}">
                <img src="results.svg?{{ query }}">
              </a>
              {% if last is not none %}
              <p>
                <table border="0">
                  <th colspan="2"> Latest Measurement in View </th>
                  <tr>
                    <td> Timestamp </td>
                    <td>{{ last['Timestamp'] | datefmt }} </td>
                  </tr>
                  <tr>
                    <td> Server </td>
                    <td> {{ last['Server ID'] }} </td>
                  </tr>
                  <tr>
                    <td> Download </td>
                    <td> {{ last['Download'] | mbits }} </td>
                  </tr>
                  <tr>
                    <td> Upload </td>
                    <td> {{ last['Upload'] | mbits }} </td>
                  </tr>
                  <tr>
                    <td> Ping </td>
                    <td> {{ "%d" | format( last['Ping'] | int ) }} ms </td>
                  </tr>
                </table>
              </p>
              {% endif %}
            </center>
          </body>
        </html>
      """
      return flask.render_template_string(TEMPLATE, total=total, query=query, last=last, **params)

    except Exception as e:
      err = str(e)
      if "no such table: speedtest" in err:
        err = "No measurements taken yet!\nPlease wait for cron to trigger a measurement or start one yourself with 'speedtest-plotter measure'.\n\n" + err
      print(err)
      return flask.Response(err, mimetype="text/plain", status=500)

  # return rendered plot picture
  @app.route("/results.svg")
  def render():
    try:
      _, params = request_params(flask.request)
      pr, rows = retrieve_measurements(**params)
      rows = list(rows)
      empty = False
      if len(rows) <= 0:
        # spoof a "null" row so gnuplot doesn't complain
        spoof = dict(([k,"0"] for k in list(FIELDNAMES) + ["id"]))
        spoof["Timestamp"] = "1970-01-01"
        rows = [spoof]
        empty = True
      data = spooler(rows)
      #return flask.Response(data, mimetype="text/plain")
      pr = ["-e", f"xrange_from = \"{pr[0]}\"", "-e", f"xrange_to = \"{pr[1]}\""] if pr else []
      empty = ["-e", "empty_range = 1"] if empty else []
      plot = run(["gnuplot", *pr, *empty,
        # TODO: proper escaping to prevent injection
        "-e", f"marker_download = {args.marker_download}",
        "-e", f"marker_upload = {args.marker_upload}",
        "-e", f"upload_scale = {args.upload_scale}",
        "-e", f"font = \"{args.font}\"",
        "-e", f"resolution = \"{args.resolution}\"",
        "-c", "plotscript", "/dev/stdin", "/dev/stdout"], stdin=data)
      data.close()
      if plot.returncode != 0:
        raise ValueError(plot.stderr.decode())
      return flask.Response(plot.stdout, mimetype="image/svg+xml")
    except Exception as e:
      print(e, file=sys.stderr)
      return flask.Response(str(e), mimetype="text/plain", status=500)

  # return raw data in formatted csv
  @app.route("/results.csv")
  def results():
    try:
      _, params = request_params(flask.request)
      _, rows = retrieve_measurements(**params)
      data = spooler(rows)
      return flask.Response(data, mimetype="text/plain")
    except Exception as e:
      return flask.Response(str(e), mimetype="text/plain", status=500)

  app.run(threaded=False, port=args.port, host="0.0.0.0", debug=args.debug)

# ---------- main() ----------
try:

  if args.command == "serve":
    flask_server()

  elif args.command == "measure":
    take_measurement_go()

  elif args.command == "import":
    for m in csv_reader(sys.stdin):
      table.insert(m)
      print(m)

  elif args.command == "dump":
    _, rows = retrieve_measurements(args.limit, args.order, args.date)
    csv_writer(rows, sys.stdout)

  else:
    raise ValueError("unknown command: " + args.command)

except Exception as e:
  print(e)
  exit(1)
